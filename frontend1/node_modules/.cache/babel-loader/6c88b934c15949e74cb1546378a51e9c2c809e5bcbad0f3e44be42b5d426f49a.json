{"ast":null,"code":"var _jsxFileName = \"D:\\\\cod\\\\ChessBlitz\\\\frontend1\\\\src\\\\Components\\\\Chessboard2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Chessboard } from \"react-chessboard\";\nimport { Chess } from \"chess.js\";\nimport { enPassant } from \"../Functions/EnPassant.js\";\nimport SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nimport \"../Styles/Chessboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard2() {\n  _s();\n  const [game, setGame] = useState();\n  const [position, setPosition] = useState({\n    a1: \"wR\",\n    a2: \"wP\",\n    a7: \"bP\",\n    a8: \"bR\",\n    b1: \"wN\",\n    b2: \"wP\",\n    b7: \"bP\",\n    b8: \"bN\",\n    c1: \"wB\",\n    c2: \"wP\",\n    c7: \"bP\",\n    c8: \"bB\",\n    d1: \"wQ\",\n    d2: \"wP\",\n    d7: \"bP\",\n    d8: \"bQ\",\n    e1: \"wK\",\n    e2: \"wP\",\n    e7: \"bP\",\n    e8: \"bK\",\n    f1: \"wB\",\n    f2: \"wP\",\n    f7: \"bP\",\n    f8: \"bB\",\n    g1: \"wN\",\n    g2: \"wP\",\n    g7: \"bP\",\n    g8: \"bN\",\n    h1: \"wR\",\n    h2: \"wP\",\n    h7: \"bP\",\n    h8: \"bR\"\n  });\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\n  const [isWhiteCastleKing, setIsWhiteCastleKing] = useState(true);\n  const [isWhiteCastleQueen, setIsWhiteCastleQueen] = useState(true);\n  const [isBlackCastleKing, setIsBlackCastleKing] = useState(true);\n  const [isBlackCastleQueen, setIsBlackCastleQueen] = useState(true);\n  useEffect(() => {\n    setGame(new Chess());\n    const socket = new SockJS('http://localhost:8080/ws');\n    const stompClient = new Client({\n      webSocketFactory: () => socket,\n      debug: str => console.log(str)\n    });\n    stompClient.onConnect = frame => {\n      console.log('Connected: ' + frame);\n\n      // Subscribe to the topic to receive moves\n      stompClient.subscribe('/topic/public', message => {\n        const move = JSON.parse(message.body);\n        handleReceivedMove(move);\n      });\n    };\n    stompClient.activate();\n    return () => {\n      stompClient.deactivate();\n    };\n  }, []);\n  function promotion(piece, sourceSquare, targetSquare) {\n    game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: piece[1].toLowerCase()\n    });\n    const newPosition = {\n      ...position\n    };\n    delete newPosition[sourceSquare]; // Remove piece from source square\n    newPosition[targetSquare] = piece; // Place piece on target square\n\n    setPosition(newPosition); // Update board position\n    setIsWhiteTurn(!isWhiteTurn); // Switch turns\n\n    return true;\n  }\n  function onPieceDrop(sourceSquare, targetSquare) {\n    if (sourceSquare[1] === '7' && position[sourceSquare] === 'wP' || sourceSquare[1] === '2' && position[sourceSquare] === 'bP') {\n      return true;\n    }\n    const piece = position[sourceSquare];\n    if (!piece) {\n      return false;\n    } // No piece to move\n\n    // Check if it's the correct turn for the piece color\n    const isWhitePiece = piece.startsWith('w');\n    if (isWhiteTurn && !isWhitePiece) {\n      alert(\"It's white's turn, but the piece is black\");\n      return false; // It's white's turn, but the piece is black\n    }\n    if (!isWhiteTurn && isWhitePiece) {\n      alert(\"It's black turn, but the piece is white\");\n      return false;\n    } // It's black's turn, but the piece is white\n\n    try {\n      game.move({\n        from: sourceSquare,\n        to: targetSquare\n      });\n      sendMoveToServer({\n        from: sourceSquare,\n        to: targetSquare\n      });\n    } catch {\n      alert('illegal move');\n      return false;\n    }\n    function sendMoveToServer(move) {\n      const socket = new SockJS('http://localhost:8080/ws');\n      const stompClient = new Client({\n        webSocketFactory: () => socket,\n        debug: str => console.log(str)\n      });\n      stompClient.onConnect = frame => {\n        stompClient.send('/app/message', {}, JSON.stringify(move));\n      };\n      stompClient.activate();\n    }\n    if (sourceSquare === 'a1' && isWhiteCastleQueen) {\n      setIsWhiteCastleQueen(false);\n    }\n    if (sourceSquare === 'h1' && isWhiteCastleKing) {\n      setIsWhiteCastleKing(false);\n    }\n    if (sourceSquare === 'e1') {\n      setIsWhiteCastleKing(false);\n      setIsWhiteCastleQueen(false);\n    }\n    if (sourceSquare === 'a8' && isBlackCastleQueen) {\n      setIsBlackCastleQueen(false);\n    }\n    if (sourceSquare === 'h8' && isBlackCastleKing) {\n      setIsBlackCastleKing(false);\n    }\n    if (sourceSquare === 'e8') {\n      setIsBlackCastleKing(false);\n      setIsBlackCastleQueen(false);\n    }\n    if (sourceSquare === 'e1' && targetSquare === 'g1') {\n      // White King-side castling\n      if (!isWhiteCastleKing) {\n        alert('Castling on the white king side is no longer allowed');\n        return false;\n      }\n\n      // Perform the king-side castling for white\n      const newPosition = {\n        ...position\n      };\n      delete newPosition['e1']; // Remove the king from e1\n      newPosition['g1'] = 'wK'; // Place the king on g1\n      delete newPosition['h1']; // Remove the rook from h1\n      newPosition['f1'] = 'wR'; // Place the rook on f1\n\n      setPosition(newPosition);\n      setIsWhiteCastleKing(false);\n      setIsWhiteCastleQueen(false);\n      setIsWhiteTurn(false); // Change turn to black\n      return true;\n    }\n    if (sourceSquare === 'e1' && targetSquare === 'c1') {\n      // White Queen-side castling\n      if (!isWhiteCastleQueen) {\n        alert('Castling on the white queen side is no longer allowed');\n        return false;\n      }\n\n      // Perform the queen-side castling for white\n      const newPosition = {\n        ...position\n      };\n      delete newPosition['e1']; // Remove the king from e1\n      newPosition['c1'] = 'wK'; // Place the king on c1\n      delete newPosition['a1']; // Remove the rook from a1\n      newPosition['d1'] = 'wR'; // Place the rook on d1\n\n      setPosition(newPosition);\n      setIsWhiteCastleKing(false);\n      setIsWhiteCastleQueen(false);\n      setIsWhiteTurn(false); // Change turn to black\n      return true;\n    }\n    if (sourceSquare === 'e8' && targetSquare === 'g8') {\n      // Black King-side castling\n      if (!isBlackCastleKing) {\n        alert('Castling on the black king side is no longer allowed');\n        return false;\n      }\n\n      // Perform the king-side castling for black\n      const newPosition = {\n        ...position\n      };\n      delete newPosition['e8']; // Remove the king from e8\n      newPosition['g8'] = 'bK'; // Place the king on g8\n      delete newPosition['h8']; // Remove the rook from h8\n      newPosition['f8'] = 'bR'; // Place the rook on f8\n\n      setPosition(newPosition);\n      setIsBlackCastleKing(false);\n      setIsBlackCastleQueen(false);\n      setIsWhiteTurn(true); // Change turn to white\n      return true;\n    }\n    if (sourceSquare === 'e8' && targetSquare === 'c8') {\n      // Black Queen-side castling\n      if (!isBlackCastleQueen) {\n        alert('Castling on the black queen side is no longer allowed');\n        return false;\n      }\n\n      // Perform the queen-side castling for black\n      const newPosition = {\n        ...position\n      };\n      delete newPosition['e8']; // Remove the king from e8\n      newPosition['c8'] = 'bK'; // Place the king on c8\n      delete newPosition['a8']; // Remove the rook from a8\n      newPosition['d8'] = 'bR'; // Place the rook on d8\n\n      setPosition(newPosition);\n      setIsBlackCastleKing(false);\n      setIsBlackCastleQueen(false);\n      setIsWhiteTurn(true); // Change turn to white\n      return true;\n    }\n    const passantSquare = enPassant(sourceSquare, targetSquare);\n    if (passantSquare !== false) {\n      const newPosition = {\n        ...position\n      };\n      delete newPosition[sourceSquare]; // Remove piece from source square\n      newPosition[targetSquare] = piece; // Place piece on target square\n      delete newPosition[passantSquare]; // Remove the captured piece\n\n      setPosition(newPosition); // Update board position\n      setIsWhiteTurn(!isWhiteTurn); // Switch turns\n\n      console.log(`Piece ${piece} moved from ${sourceSquare} to ${targetSquare}`);\n      return true;\n    }\n    if (game.isCheckmate()) {\n      alert(isWhiteTurn ? \"Black wins by checkmate!\" : \"White wins by checkmate!\");\n      // You can optionally reset the game or take other actions here\n      return true; // End the function since the game is over\n    }\n    if (game.isDraw()) {\n      alert(\"The game is a draw!\");\n      // You can optionally reset the game or take other actions here\n      return true; // End the function since the\n    }\n    const newPosition = {\n      ...position\n    };\n    delete newPosition[sourceSquare]; // Remove piece from source square\n    newPosition[targetSquare] = piece; // Place piece on target square\n\n    setPosition(newPosition); // Update board position\n    setIsWhiteTurn(!isWhiteTurn); // Switch turns\n\n    console.log(`Piece ${piece} moved from ${sourceSquare} to ${targetSquare}`);\n    return true;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Chessboard\",\n    children: /*#__PURE__*/_jsxDEV(Chessboard, {\n      id: \"Basicboard\",\n      position: position // Pass custom board position\n      ,\n      onPieceDrop: onPieceDrop // Handle piece drop\n      ,\n      arePiecesDraggable: true // Make pieces draggable\n      ,\n      onPromotionPieceSelect: promotion // Handle pawn promotion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard2, \"3H8epd4GMbx5KKVemOUYUPLe34Y=\");\n_c = Chessboard2;\nvar _c;\n$RefreshReg$(_c, \"Chessboard2\");","map":{"version":3,"names":["React","useEffect","useState","Chessboard","Chess","enPassant","SockJS","Client","jsxDEV","_jsxDEV","Chessboard2","_s","game","setGame","position","setPosition","a1","a2","a7","a8","b1","b2","b7","b8","c1","c2","c7","c8","d1","d2","d7","d8","e1","e2","e7","e8","f1","f2","f7","f8","g1","g2","g7","g8","h1","h2","h7","h8","isWhiteTurn","setIsWhiteTurn","isWhiteCastleKing","setIsWhiteCastleKing","isWhiteCastleQueen","setIsWhiteCastleQueen","isBlackCastleKing","setIsBlackCastleKing","isBlackCastleQueen","setIsBlackCastleQueen","socket","stompClient","webSocketFactory","debug","str","console","log","onConnect","frame","subscribe","message","move","JSON","parse","body","handleReceivedMove","activate","deactivate","promotion","piece","sourceSquare","targetSquare","from","to","toLowerCase","newPosition","onPieceDrop","isWhitePiece","startsWith","alert","sendMoveToServer","send","stringify","passantSquare","isCheckmate","isDraw","className","children","id","arePiecesDraggable","onPromotionPieceSelect","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/cod/ChessBlitz/frontend1/src/Components/Chessboard2.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport { Chess }  from \"chess.js\";\r\nimport { enPassant } from \"../Functions/EnPassant.js\";\r\nimport SockJS from 'sockjs-client';\r\nimport { Client } from '@stomp/stompjs';\r\nimport \"../Styles/Chessboard.css\";\r\n\r\nexport default function Chessboard2() {\r\n  const [game, setGame] = useState();\r\n  const [position, setPosition] = useState({\r\n    a1: \"wR\", a2: \"wP\", a7: \"bP\", a8: \"bR\",\r\n    b1: \"wN\", b2: \"wP\", b7: \"bP\", b8: \"bN\",\r\n    c1: \"wB\", c2: \"wP\", c7: \"bP\", c8: \"bB\",\r\n    d1: \"wQ\", d2: \"wP\", d7: \"bP\", d8: \"bQ\",\r\n    e1: \"wK\", e2: \"wP\", e7: \"bP\", e8: \"bK\",\r\n    f1: \"wB\", f2: \"wP\", f7: \"bP\", f8: \"bB\",\r\n    g1: \"wN\", g2: \"wP\", g7: \"bP\", g8: \"bN\",\r\n    h1: \"wR\", h2: \"wP\", h7: \"bP\", h8: \"bR\",\r\n  });\r\n\r\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\r\n\r\n  const [isWhiteCastleKing, setIsWhiteCastleKing] = useState(true);\r\n  const [isWhiteCastleQueen, setIsWhiteCastleQueen] = useState(true);\r\n  const [isBlackCastleKing, setIsBlackCastleKing] = useState(true);\r\n  const [isBlackCastleQueen, setIsBlackCastleQueen] = useState(true);\r\n\r\n  useEffect(()=>{\r\n    setGame(new Chess());\r\n\r\n    const socket = new SockJS('http://localhost:8080/ws');\r\n    const stompClient = new Client({\r\n      webSocketFactory: () => socket,\r\n      debug: (str) => console.log(str),\r\n    });\r\n\r\n    stompClient.onConnect = (frame) => {\r\n      console.log('Connected: ' + frame);\r\n\r\n      // Subscribe to the topic to receive moves\r\n      stompClient.subscribe('/topic/public', (message) => {\r\n        const move = JSON.parse(message.body);\r\n        handleReceivedMove(move);\r\n      });\r\n    };\r\n\r\n    stompClient.activate();\r\n\r\n    return () => {\r\n      stompClient.deactivate();\r\n    };\r\n  }, []);\r\n\r\n  \r\n\r\n  function promotion(piece,sourceSquare,targetSquare) {\r\n    \r\n    game.move({ from : sourceSquare, to : targetSquare, promotion : piece[1].toLowerCase() });\r\n\r\n    const newPosition = { ...position };\r\n    delete newPosition[sourceSquare]; // Remove piece from source square\r\n    newPosition[targetSquare] = piece; // Place piece on target square\r\n\r\n    setPosition(newPosition); // Update board position\r\n    setIsWhiteTurn(!isWhiteTurn); // Switch turns\r\n\r\n    return true;\r\n  }\r\n\r\n  function onPieceDrop(sourceSquare, targetSquare) {\r\n    if((sourceSquare[1] === '7' && position[sourceSquare] === 'wP') || (sourceSquare[1] === '2' && position[sourceSquare] === 'bP')) {\r\n      return true;\r\n    }\r\n    \r\n    const piece = position[sourceSquare];\r\n    if (!piece) {\r\n    return false;\r\n    } // No piece to move\r\n\r\n    // Check if it's the correct turn for the piece color\r\n    const isWhitePiece = piece.startsWith('w');\r\n    if (isWhiteTurn && !isWhitePiece) { \r\n    alert(\"It's white's turn, but the piece is black\");\r\n    return false; // It's white's turn, but the piece is black\r\n    }\r\n    if (!isWhiteTurn && isWhitePiece) {\r\n      alert(\"It's black turn, but the piece is white\");\r\n      return false;\r\n    }// It's black's turn, but the piece is white\r\n\r\n    try { \r\n      game.move({ from : sourceSquare, to : targetSquare });\r\n\r\n      sendMoveToServer({ from: sourceSquare, to: targetSquare });\r\n    } catch {\r\n      alert('illegal move');\r\n      return false;\r\n    }\r\n\r\n    function sendMoveToServer(move) {\r\n      const socket = new SockJS('http://localhost:8080/ws');\r\n      const stompClient = new Client({\r\n        webSocketFactory: () => socket,\r\n        debug: (str) => console.log(str),\r\n      });\r\n  \r\n      stompClient.onConnect = (frame) => {\r\n        stompClient.send('/app/message', {}, JSON.stringify(move));\r\n      };\r\n  \r\n      stompClient.activate();\r\n    }\r\n    \r\n\r\n    if(sourceSquare === 'a1' && isWhiteCastleQueen)\r\n    {\r\n      setIsWhiteCastleQueen(false);\r\n    }\r\n\r\n    if(sourceSquare === 'h1' && isWhiteCastleKing)\r\n    {\r\n      setIsWhiteCastleKing(false);\r\n    }\r\n\r\n    if(sourceSquare === 'e1')\r\n    {\r\n      setIsWhiteCastleKing(false);\r\n      setIsWhiteCastleQueen(false);\r\n    }\r\n\r\n    if(sourceSquare === 'a8' && isBlackCastleQueen)\r\n    {\r\n      setIsBlackCastleQueen(false);\r\n    }\r\n  \r\n    if(sourceSquare === 'h8' && isBlackCastleKing)\r\n    {\r\n      setIsBlackCastleKing(false);\r\n    }\r\n  \r\n    if(sourceSquare === 'e8')\r\n    {\r\n      setIsBlackCastleKing(false);\r\n      setIsBlackCastleQueen(false);\r\n    }\r\n\r\n    if (sourceSquare === 'e1' && targetSquare === 'g1') { // White King-side castling\r\n      if (!isWhiteCastleKing) {\r\n        alert('Castling on the white king side is no longer allowed');\r\n        return false;\r\n      }\r\n    \r\n      // Perform the king-side castling for white\r\n      const newPosition = { ...position };\r\n      delete newPosition['e1']; // Remove the king from e1\r\n      newPosition['g1'] = 'wK'; // Place the king on g1\r\n      delete newPosition['h1']; // Remove the rook from h1\r\n      newPosition['f1'] = 'wR'; // Place the rook on f1\r\n    \r\n      setPosition(newPosition);\r\n      setIsWhiteCastleKing(false);\r\n      setIsWhiteCastleQueen(false);\r\n      setIsWhiteTurn(false); // Change turn to black\r\n      return true;\r\n    }\r\n\r\n    if (sourceSquare === 'e1' && targetSquare === 'c1') { // White Queen-side castling\r\n      if (!isWhiteCastleQueen) {\r\n        alert('Castling on the white queen side is no longer allowed');\r\n        return false;\r\n      }\r\n\r\n      // Perform the queen-side castling for white\r\n      const newPosition = { ...position };\r\n      delete newPosition['e1']; // Remove the king from e1\r\n      newPosition['c1'] = 'wK'; // Place the king on c1\r\n      delete newPosition['a1']; // Remove the rook from a1\r\n      newPosition['d1'] = 'wR'; // Place the rook on d1\r\n\r\n      setPosition(newPosition);\r\n      setIsWhiteCastleKing(false);\r\n      setIsWhiteCastleQueen(false);\r\n      setIsWhiteTurn(false); // Change turn to black\r\n      return true;\r\n    }\r\n\r\n    if (sourceSquare === 'e8' && targetSquare === 'g8') { // Black King-side castling\r\n      if (!isBlackCastleKing) {\r\n        alert('Castling on the black king side is no longer allowed');\r\n        return false;\r\n      }\r\n\r\n      // Perform the king-side castling for black\r\n      const newPosition = { ...position };\r\n      delete newPosition['e8']; // Remove the king from e8\r\n      newPosition['g8'] = 'bK'; // Place the king on g8\r\n      delete newPosition['h8']; // Remove the rook from h8\r\n      newPosition['f8'] = 'bR'; // Place the rook on f8\r\n\r\n      setPosition(newPosition);\r\n      setIsBlackCastleKing(false);\r\n      setIsBlackCastleQueen(false);\r\n      setIsWhiteTurn(true); // Change turn to white\r\n      return true;\r\n    }\r\n\r\n    if(sourceSquare === 'e8' && targetSquare === 'c8') { // Black Queen-side castling\r\n      if (!isBlackCastleQueen) {\r\n        alert('Castling on the black queen side is no longer allowed');\r\n        return false;\r\n      }\r\n\r\n      // Perform the queen-side castling for black\r\n      const newPosition = { ...position };\r\n      delete newPosition['e8']; // Remove the king from e8\r\n      newPosition['c8'] = 'bK'; // Place the king on c8\r\n      delete newPosition['a8']; // Remove the rook from a8\r\n      newPosition['d8'] = 'bR'; // Place the rook on d8\r\n\r\n      setPosition(newPosition);\r\n      setIsBlackCastleKing(false);\r\n      setIsBlackCastleQueen(false);\r\n      setIsWhiteTurn(true); // Change turn to white\r\n      return true;\r\n    }\r\n\r\n    const passantSquare = enPassant(sourceSquare, targetSquare);\r\n\r\n    if(passantSquare !== false)\r\n    {\r\n        const newPosition = { ...position };\r\n        delete newPosition[sourceSquare]; // Remove piece from source square\r\n        newPosition[targetSquare] = piece; // Place piece on target square\r\n        delete newPosition[passantSquare]; // Remove the captured piece\r\n\r\n        setPosition(newPosition); // Update board position\r\n        setIsWhiteTurn(!isWhiteTurn); // Switch turns\r\n\r\n        console.log(`Piece ${piece} moved from ${sourceSquare} to ${targetSquare}`);\r\n        return true;\r\n    } \r\n\r\n    \r\n\r\n    if (game.isCheckmate()) {\r\n      alert(isWhiteTurn ? \"Black wins by checkmate!\" : \"White wins by checkmate!\");\r\n      // You can optionally reset the game or take other actions here\r\n      return true; // End the function since the game is over\r\n    }\r\n\r\n    if(game.isDraw()) {\r\n      alert(\"The game is a draw!\");\r\n      // You can optionally reset the game or take other actions here\r\n      return true; // End the function since the\r\n    }\r\n\r\n    const newPosition = { ...position };\r\n    delete newPosition[sourceSquare]; // Remove piece from source square\r\n    newPosition[targetSquare] = piece; // Place piece on target square\r\n\r\n    setPosition(newPosition); // Update board position\r\n    setIsWhiteTurn(!isWhiteTurn); // Switch turns\r\n\r\n    console.log(`Piece ${piece} moved from ${sourceSquare} to ${targetSquare}`);\r\n    return true;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Chessboard\">\r\n      <Chessboard\r\n        id=\"Basicboard\"\r\n        position={position} // Pass custom board position\r\n        onPieceDrop={onPieceDrop} // Handle piece drop\r\n        arePiecesDraggable={true} // Make pieces draggable\r\n        onPromotionPieceSelect={promotion} // Handle pawn promotion\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}