{"ast":null,"code":"var _jsxFileName = \"D:\\\\cod\\\\ChessBlitz\\\\frontend\\\\src\\\\Components\\\\Chessboard2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Chessboard } from \"react-chessboard\";\nimport { Chess } from \"chess.js\";\nimport { enPassant } from \"../Functions/EnPassant.js\";\nimport \"../Styles/Chessboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard2() {\n  _s();\n  const [game, setGame] = useState();\n  const [position, setPosition] = useState({\n    a1: \"wR\",\n    a2: \"wP\",\n    a7: \"bP\",\n    a8: \"bR\",\n    b1: \"wN\",\n    b2: \"wP\",\n    b7: \"bP\",\n    b8: \"bN\",\n    c1: \"wB\",\n    c2: \"wP\",\n    c7: \"bP\",\n    c8: \"bB\",\n    d1: \"wQ\",\n    d2: \"wP\",\n    d7: \"bP\",\n    d8: \"bQ\",\n    e1: \"wK\",\n    e2: \"wP\",\n    e7: \"bP\",\n    e8: \"bK\",\n    f1: \"wB\",\n    f2: \"wP\",\n    f7: \"bP\",\n    f8: \"bB\",\n    g1: \"wN\",\n    g2: \"wP\",\n    g7: \"bP\",\n    g8: \"bN\",\n    h1: \"wR\",\n    h2: \"wP\",\n    h7: \"bP\",\n    h8: \"bR\"\n  });\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\n  const [promotion, setPromotion] = useState(null); // For handling promotion\n\n  const [isWhiteCastleKing, setIsWhiteCastleKing] = useState(true);\n  const [isWhiteCastleQueen, setIsWhiteCastleQueen] = useState(true);\n  const [isBlackCastleKing, setIsBlackCastleKing] = useState(true);\n  const [isBlackCastleQueen, setIsBlackCastleQueen] = useState(true);\n  useEffect(() => {\n    setGame(new Chess());\n  }, []);\n  function onPieceDrop(sourceSquare, targetSquare) {\n    const piece = position[sourceSquare];\n    if (!piece) {\n      return false;\n    } // No piece to move\n\n    // Check if it's the correct turn for the piece color\n    const isWhitePiece = piece.startsWith('w');\n    if (isWhiteTurn && !isWhitePiece) {\n      alert(\"It's white's turn, but the piece is black\");\n      return false; // It's white's turn, but the piece is black\n    }\n    if (!isWhiteTurn && isWhitePiece) {\n      alert(\"It's black's turn, but the piece is white\");\n      return false; // It's black's turn, but the piece is white\n    }\n    try {\n      game.move({\n        from: sourceSquare,\n        to: targetSquare\n      });\n    } catch {\n      alert('illegal move');\n      return false;\n    }\n\n    // Handle promotion for white pawns\n    if (piece === 'wP' && targetSquare[1] === '8') {\n      setPromotion({\n        from: sourceSquare,\n        to: targetSquare,\n        color: 'w'\n      });\n      return true;\n    }\n\n    // Handle promotion for black pawns\n    if (piece === 'bP' && targetSquare[1] === '1') {\n      setPromotion({\n        from: sourceSquare,\n        to: targetSquare,\n        color: 'b'\n      });\n      return true;\n    }\n    const newPosition = {\n      ...position\n    };\n    delete newPosition[sourceSquare]; // Remove piece from source square\n    newPosition[targetSquare] = piece; // Place piece on target square\n\n    setPosition(newPosition); // Update board position\n    setIsWhiteTurn(!isWhiteTurn); // Switch turns\n\n    console.log(`Piece ${piece} moved from ${sourceSquare} to ${targetSquare}`);\n    return true;\n  }\n\n  // Function to handle pawn promotion\n  function handlePromotion(promotionPiece) {\n    if (promotion) {\n      const {\n        from,\n        to,\n        color\n      } = promotion;\n      const newPosition = {\n        ...position\n      };\n      delete newPosition[from]; // Remove the pawn from the source square\n      newPosition[to] = `${color}${promotionPiece}`; // Add the promoted piece\n\n      setPosition(newPosition);\n      setPromotion(null); // Reset the promotion state\n      setIsWhiteTurn(!isWhiteTurn); // Switch turns\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Chessboard\",\n    children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n      id: \"Basicboard\",\n      position: position // Pass custom board position\n      ,\n      onPieceDrop: onPieceDrop // Handle piece drop\n      ,\n      arePiecesDraggable: true // Make pieces draggable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), promotion && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"promotion-dialog\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Choose promotion piece:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePromotion(\"Q\"),\n        children: \"Queen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePromotion(\"R\"),\n        children: \"Rook\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePromotion(\"B\"),\n        children: \"Bishop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePromotion(\"N\"),\n        children: \"Knight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard2, \"nrUb+fIcm2Vn42+DKFnU8acoMqw=\");\n_c = Chessboard2;\nvar _c;\n$RefreshReg$(_c, \"Chessboard2\");","map":{"version":3,"names":["React","useEffect","useState","Chessboard","Chess","enPassant","jsxDEV","_jsxDEV","Chessboard2","_s","game","setGame","position","setPosition","a1","a2","a7","a8","b1","b2","b7","b8","c1","c2","c7","c8","d1","d2","d7","d8","e1","e2","e7","e8","f1","f2","f7","f8","g1","g2","g7","g8","h1","h2","h7","h8","isWhiteTurn","setIsWhiteTurn","promotion","setPromotion","isWhiteCastleKing","setIsWhiteCastleKing","isWhiteCastleQueen","setIsWhiteCastleQueen","isBlackCastleKing","setIsBlackCastleKing","isBlackCastleQueen","setIsBlackCastleQueen","onPieceDrop","sourceSquare","targetSquare","piece","isWhitePiece","startsWith","alert","move","from","to","color","newPosition","console","log","handlePromotion","promotionPiece","className","children","id","arePiecesDraggable","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/cod/ChessBlitz/frontend/src/Components/Chessboard2.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport { Chess } from \"chess.js\";\r\nimport { enPassant } from \"../Functions/EnPassant.js\";\r\nimport \"../Styles/Chessboard.css\";\r\n\r\nexport default function Chessboard2() {\r\n  const [game, setGame] = useState();\r\n  const [position, setPosition] = useState({\r\n    a1: \"wR\", a2: \"wP\", a7: \"bP\", a8: \"bR\",\r\n    b1: \"wN\", b2: \"wP\", b7: \"bP\", b8: \"bN\",\r\n    c1: \"wB\", c2: \"wP\", c7: \"bP\", c8: \"bB\",\r\n    d1: \"wQ\", d2: \"wP\", d7: \"bP\", d8: \"bQ\",\r\n    e1: \"wK\", e2: \"wP\", e7: \"bP\", e8: \"bK\",\r\n    f1: \"wB\", f2: \"wP\", f7: \"bP\", f8: \"bB\",\r\n    g1: \"wN\", g2: \"wP\", g7: \"bP\", g8: \"bN\",\r\n    h1: \"wR\", h2: \"wP\", h7: \"bP\", h8: \"bR\",\r\n  });\r\n\r\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\r\n  const [promotion, setPromotion] = useState(null); // For handling promotion\r\n\r\n  const [isWhiteCastleKing, setIsWhiteCastleKing] = useState(true);\r\n  const [isWhiteCastleQueen, setIsWhiteCastleQueen] = useState(true);\r\n  const [isBlackCastleKing, setIsBlackCastleKing] = useState(true);\r\n  const [isBlackCastleQueen, setIsBlackCastleQueen] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setGame(new Chess());\r\n  }, []);\r\n\r\n  function onPieceDrop(sourceSquare, targetSquare) {\r\n    const piece = position[sourceSquare];\r\n    if (!piece) {\r\n      return false;\r\n    } // No piece to move\r\n\r\n    // Check if it's the correct turn for the piece color\r\n    const isWhitePiece = piece.startsWith('w');\r\n    if (isWhiteTurn && !isWhitePiece) {\r\n      alert(\"It's white's turn, but the piece is black\");\r\n      return false; // It's white's turn, but the piece is black\r\n    }\r\n    if (!isWhiteTurn && isWhitePiece) {\r\n      alert(\"It's black's turn, but the piece is white\");\r\n      return false; // It's black's turn, but the piece is white\r\n    }\r\n\r\n    try {\r\n      game.move({ from: sourceSquare, to: targetSquare });\r\n    } catch {\r\n      alert('illegal move');\r\n      return false;\r\n    }\r\n\r\n    // Handle promotion for white pawns\r\n    if (piece === 'wP' && targetSquare[1] === '8') {\r\n      setPromotion({ from: sourceSquare, to: targetSquare, color: 'w' });\r\n      return true;\r\n    }\r\n\r\n    // Handle promotion for black pawns\r\n    if (piece === 'bP' && targetSquare[1] === '1') {\r\n      setPromotion({ from: sourceSquare, to: targetSquare, color: 'b' });\r\n      return true;\r\n    }\r\n\r\n    const newPosition = { ...position };\r\n    delete newPosition[sourceSquare]; // Remove piece from source square\r\n    newPosition[targetSquare] = piece; // Place piece on target square\r\n\r\n    setPosition(newPosition); // Update board position\r\n    setIsWhiteTurn(!isWhiteTurn); // Switch turns\r\n\r\n    console.log(`Piece ${piece} moved from ${sourceSquare} to ${targetSquare}`);\r\n    return true;\r\n  }\r\n\r\n  // Function to handle pawn promotion\r\n  function handlePromotion(promotionPiece) {\r\n    if (promotion) {\r\n      const { from, to, color } = promotion;\r\n      const newPosition = { ...position };\r\n      delete newPosition[from]; // Remove the pawn from the source square\r\n      newPosition[to] = `${color}${promotionPiece}`; // Add the promoted piece\r\n\r\n      setPosition(newPosition);\r\n      setPromotion(null); // Reset the promotion state\r\n      setIsWhiteTurn(!isWhiteTurn); // Switch turns\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Chessboard\">\r\n      <Chessboard\r\n        id=\"Basicboard\"\r\n        position={position} // Pass custom board position\r\n        onPieceDrop={onPieceDrop} // Handle piece drop\r\n        arePiecesDraggable={true} // Make pieces draggable\r\n      />\r\n\r\n      {/* Promotion dialog */}\r\n      {promotion && (\r\n        <div className=\"promotion-dialog\">\r\n          <p>Choose promotion piece:</p>\r\n          <button onClick={() => handlePromotion(\"Q\")}>Queen</button>\r\n          <button onClick={() => handlePromotion(\"R\")}>Rook</button>\r\n          <button onClick={() => handlePromotion(\"B\")}>Bishop</button>\r\n          <button onClick={() => handlePromotion(\"N\")}>Knight</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}