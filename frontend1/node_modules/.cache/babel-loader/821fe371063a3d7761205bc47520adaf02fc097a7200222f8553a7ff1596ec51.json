{"ast":null,"code":"var _jsxFileName = \"D:\\\\cod\\\\ChessBlitz\\\\frontend\\\\src\\\\Components\\\\Chessboard2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Chessboard } from \"react-chessboard\";\nimport \"../Styles/Chessboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard2() {\n  _s();\n  const [position, setPosition] = useState({\n    a1: \"wR\",\n    a2: \"wP\",\n    a7: \"bP\",\n    a8: \"bR\",\n    b1: \"wN\",\n    b2: \"wP\",\n    b7: \"bP\",\n    b8: \"bN\",\n    c1: \"wB\",\n    c2: \"wP\",\n    c7: \"bP\",\n    c8: \"bB\",\n    d1: \"wQ\",\n    d2: \"wP\",\n    d7: \"bP\",\n    d8: \"bQ\",\n    e1: \"wK\",\n    e2: \"wP\",\n    e7: \"bP\",\n    e8: \"bK\",\n    f1: \"wB\",\n    f2: \"wP\",\n    f7: \"bP\",\n    f8: \"bB\",\n    g1: \"wN\",\n    g2: \"wP\",\n    g7: \"bP\",\n    g8: \"bN\",\n    h1: \"wR\",\n    h2: \"wP\",\n    h7: \"bP\",\n    h8: \"bR\"\n  });\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\n  function onPieceDrop(sourceSquare, targetSquare) {\n    const piece = position[sourceSquare];\n    if (!piece) return false; // No piece to move\n\n    // Check if it's the correct turn for the piece color\n    const isWhitePiece = piece.startsWith('w');\n    if (isWhiteTurn && !isWhitePiece) {\n      alert(\"It's white's turn, but the piece is black\");\n      return false; // It's white's turn, but the piece is black\n    }\n    if (!isWhiteTurn && isWhitePiece) {\n      alert(\"It's black turn, but the piece is white\");\n      return false;\n    } // It's black's turn, but the piece is white\n\n    const newPosition = {\n      ...position\n    };\n    delete newPosition[sourceSquare]; // Remove piece from source square\n    newPosition[targetSquare] = piece; // Place piece on target square\n\n    setPosition(newPosition); // Update board position\n    setIsWhiteTurn(!isWhiteTurn); // Switch turns\n\n    console.log(`Piece ${piece} moved from ${sourceSquare} to ${targetSquare}`);\n    return true;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Chessboard\",\n    children: /*#__PURE__*/_jsxDEV(Chessboard, {\n      id: \"Basicboard\",\n      position: position // Pass custom board position\n      ,\n      onPieceDrop: onPieceDrop // Handle piece drop\n      ,\n      arePiecesDraggable: true // Make pieces draggable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard2, \"yi7Gn2bvXkm/5HfDmp7mqbd63ec=\");\n_c = Chessboard2;\nvar _c;\n$RefreshReg$(_c, \"Chessboard2\");","map":{"version":3,"names":["React","useState","Chessboard","jsxDEV","_jsxDEV","Chessboard2","_s","position","setPosition","a1","a2","a7","a8","b1","b2","b7","b8","c1","c2","c7","c8","d1","d2","d7","d8","e1","e2","e7","e8","f1","f2","f7","f8","g1","g2","g7","g8","h1","h2","h7","h8","isWhiteTurn","setIsWhiteTurn","onPieceDrop","sourceSquare","targetSquare","piece","isWhitePiece","startsWith","alert","newPosition","console","log","className","children","id","arePiecesDraggable","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/cod/ChessBlitz/frontend/src/Components/Chessboard2.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport \"../Styles/Chessboard.css\";\r\n\r\nexport default function Chessboard2() {\r\n  const [position, setPosition] = useState({\r\n    a1: \"wR\", a2: \"wP\", a7: \"bP\", a8: \"bR\",\r\n    b1: \"wN\", b2: \"wP\", b7: \"bP\", b8: \"bN\",\r\n    c1: \"wB\", c2: \"wP\", c7: \"bP\", c8: \"bB\",\r\n    d1: \"wQ\", d2: \"wP\", d7: \"bP\", d8: \"bQ\",\r\n    e1: \"wK\", e2: \"wP\", e7: \"bP\", e8: \"bK\",\r\n    f1: \"wB\", f2: \"wP\", f7: \"bP\", f8: \"bB\",\r\n    g1: \"wN\", g2: \"wP\", g7: \"bP\", g8: \"bN\",\r\n    h1: \"wR\", h2: \"wP\", h7: \"bP\", h8: \"bR\",\r\n  });\r\n\r\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\r\n\r\n  function onPieceDrop(sourceSquare, targetSquare) {\r\n    const piece = position[sourceSquare];\r\n    if (!piece) return false; // No piece to move\r\n\r\n    // Check if it's the correct turn for the piece color\r\n    const isWhitePiece = piece.startsWith('w');\r\n    if (isWhiteTurn && !isWhitePiece) { \r\n    alert(\"It's white's turn, but the piece is black\");\r\n    return false; // It's white's turn, but the piece is black\r\n    }\r\n    if (!isWhiteTurn && isWhitePiece) {\r\n      alert(\"It's black turn, but the piece is white\");\r\n      return false;\r\n    }// It's black's turn, but the piece is white\r\n\r\n    const newPosition = { ...position };\r\n    delete newPosition[sourceSquare]; // Remove piece from source square\r\n    newPosition[targetSquare] = piece; // Place piece on target square\r\n\r\n    setPosition(newPosition); // Update board position\r\n    setIsWhiteTurn(!isWhiteTurn); // Switch turns\r\n\r\n    console.log(`Piece ${piece} moved from ${sourceSquare} to ${targetSquare}`);\r\n    return true;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Chessboard\">\r\n      <Chessboard\r\n        id=\"Basicboard\"\r\n        position={position} // Pass custom board position\r\n        onPieceDrop={onPieceDrop} // Handle piece drop\r\n        arePiecesDraggable={true} // Make pieces draggable\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}