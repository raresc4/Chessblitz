{"ast":null,"code":"var _jsxFileName = \"D:\\\\cod\\\\ChessBlitz\\\\frontend\\\\src\\\\Components\\\\Chessboard2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Chessboard } from \"react-chessboard\";\nimport { Chess } from \"chess.js\";\nimport { enPassant } from \"../Functions/EnPassant.js\";\nimport \"../Styles/Chessboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard2() {\n  _s();\n  const [game, setGame] = useState();\n  const [position, setPosition] = useState({\n    a1: \"wR\",\n    a2: \"wP\",\n    a7: \"bP\",\n    a8: \"bR\",\n    b1: \"wN\",\n    b2: \"wP\",\n    b7: \"bP\",\n    b8: \"bN\",\n    c1: \"wB\",\n    c2: \"wP\",\n    c7: \"bP\",\n    c8: \"bB\",\n    d1: \"wQ\",\n    d2: \"wP\",\n    d7: \"bP\",\n    d8: \"bQ\",\n    e1: \"wK\",\n    e2: \"wP\",\n    e7: \"bP\",\n    e8: \"bK\",\n    f1: \"wB\",\n    f2: \"wP\",\n    f7: \"bP\",\n    f8: \"bB\",\n    g1: \"wN\",\n    g2: \"wP\",\n    g7: \"bP\",\n    g8: \"bN\",\n    h1: \"wR\",\n    h2: \"wP\",\n    h7: \"bP\",\n    h8: \"bR\"\n  });\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\n  const [isWhiteCastleKing, setIsWhiteCastleKing] = useState(true);\n  const [isWhiteCastleQueen, setIsWhiteCastleQueen] = useState(true);\n  const [isBlackCastleKing, setIsBlackCastleKing] = useState(true);\n  const [isBlackCastleQueen, setIsBlackCastleQueen] = useState(true);\n  const [promotionChoice, setPromotionChoice] = useState(null);\n  useEffect(() => {\n    setGame(new Chess());\n  }, []);\n\n  // Function to prompt the user for promotion\n  function handlePromotion(sourceSquare, targetSquare) {\n    const isWhitePawn = position[sourceSquare] === \"wP\";\n    const isBlackPawn = position[sourceSquare] === \"bP\";\n    const promotionRank = isWhitePawn ? \"8\" : \"1\";\n\n    // Check if the piece is a pawn and reached the final rank\n    if (isWhitePawn && targetSquare[1] === promotionRank) {\n      return true;\n    }\n    if (isBlackPawn && targetSquare[1] === promotionRank) {\n      return true;\n    }\n    return false;\n  }\n  function onPieceDrop(sourceSquare, targetSquare) {\n    const piece = position[sourceSquare];\n    if (!piece) return false; // No piece to move\n\n    // Check if it's the correct turn for the piece color\n    const isWhitePiece = piece.startsWith('w');\n    if (isWhiteTurn && !isWhitePiece) {\n      alert(\"It's white's turn, but the piece is black\");\n      return false;\n    }\n    if (!isWhiteTurn && isWhitePiece) {\n      alert(\"It's black's turn, but the piece is white\");\n      return false;\n    }\n\n    // Handle Promotion\n    if (handlePromotion(sourceSquare, targetSquare)) {\n      const pieceToPromote = window.prompt(\"Promote to (q, r, b, n)?\", \"q\");\n      const validPromotionPieces = ['q', 'r', 'b', 'n'];\n      const promotionPiece = validPromotionPieces.includes(pieceToPromote) ? pieceToPromote : 'q';\n      try {\n        game.move({\n          from: sourceSquare,\n          to: targetSquare,\n          promotion: promotionPiece\n        });\n      } catch (e) {\n        alert(\"Illegal move\");\n        return false;\n      }\n    } else {\n      try {\n        game.move({\n          from: sourceSquare,\n          to: targetSquare\n        });\n      } catch {\n        alert('Illegal move');\n        return false;\n      }\n    }\n\n    // Handle castling logic\n    if (sourceSquare === 'a1' && isWhiteCastleQueen) setIsWhiteCastleQueen(false);\n    if (sourceSquare === 'h1' && isWhiteCastleKing) setIsWhiteCastleKing(false);\n    if (sourceSquare === 'e1') {\n      setIsWhiteCastleKing(false);\n      setIsWhiteCastleQueen(false);\n    }\n    if (sourceSquare === 'a8' && isBlackCastleQueen) setIsBlackCastleQueen(false);\n    if (sourceSquare === 'h8' && isBlackCastleKing) setIsBlackCastleKing(false);\n    if (sourceSquare === 'e8') {\n      setIsBlackCastleKing(false);\n      setIsBlackCastleQueen(false);\n    }\n\n    // Handle en passant\n    const passantSquare = enPassant(sourceSquare, targetSquare);\n    if (passantSquare !== false) {\n      const newPosition = {\n        ...position\n      };\n      delete newPosition[sourceSquare];\n      newPosition[targetSquare] = piece;\n      delete newPosition[passantSquare];\n      setPosition(newPosition);\n      setIsWhiteTurn(!isWhiteTurn);\n      return true;\n    }\n    if (game.isCheckmate()) {\n      alert(isWhiteTurn ? \"Black wins by checkmate!\" : \"White wins by checkmate!\");\n      return true;\n    }\n    if (game.isDraw()) {\n      alert(\"The game is a draw!\");\n      return true;\n    }\n    const newPosition = {\n      ...position\n    };\n    delete newPosition[sourceSquare];\n    newPosition[targetSquare] = piece;\n    setPosition(newPosition);\n    setIsWhiteTurn(!isWhiteTurn);\n    return true;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Chessboard\",\n    children: /*#__PURE__*/_jsxDEV(Chessboard, {\n      id: \"Basicboard\",\n      position: position,\n      onPieceDrop: onPieceDrop,\n      arePiecesDraggable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard2, \"Z1zxFpBO3hBd49RtT2COjJDpEx0=\");\n_c = Chessboard2;\nvar _c;\n$RefreshReg$(_c, \"Chessboard2\");","map":{"version":3,"names":["React","useEffect","useState","Chessboard","Chess","enPassant","jsxDEV","_jsxDEV","Chessboard2","_s","game","setGame","position","setPosition","a1","a2","a7","a8","b1","b2","b7","b8","c1","c2","c7","c8","d1","d2","d7","d8","e1","e2","e7","e8","f1","f2","f7","f8","g1","g2","g7","g8","h1","h2","h7","h8","isWhiteTurn","setIsWhiteTurn","isWhiteCastleKing","setIsWhiteCastleKing","isWhiteCastleQueen","setIsWhiteCastleQueen","isBlackCastleKing","setIsBlackCastleKing","isBlackCastleQueen","setIsBlackCastleQueen","promotionChoice","setPromotionChoice","handlePromotion","sourceSquare","targetSquare","isWhitePawn","isBlackPawn","promotionRank","onPieceDrop","piece","isWhitePiece","startsWith","alert","pieceToPromote","window","prompt","validPromotionPieces","promotionPiece","includes","move","from","to","promotion","e","passantSquare","newPosition","isCheckmate","isDraw","className","children","id","arePiecesDraggable","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/cod/ChessBlitz/frontend/src/Components/Chessboard2.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport { Chess } from \"chess.js\";\r\nimport { enPassant } from \"../Functions/EnPassant.js\";\r\nimport \"../Styles/Chessboard.css\";\r\n\r\nexport default function Chessboard2() {\r\n  const [game, setGame] = useState();\r\n  const [position, setPosition] = useState({\r\n    a1: \"wR\", a2: \"wP\", a7: \"bP\", a8: \"bR\",\r\n    b1: \"wN\", b2: \"wP\", b7: \"bP\", b8: \"bN\",\r\n    c1: \"wB\", c2: \"wP\", c7: \"bP\", c8: \"bB\",\r\n    d1: \"wQ\", d2: \"wP\", d7: \"bP\", d8: \"bQ\",\r\n    e1: \"wK\", e2: \"wP\", e7: \"bP\", e8: \"bK\",\r\n    f1: \"wB\", f2: \"wP\", f7: \"bP\", f8: \"bB\",\r\n    g1: \"wN\", g2: \"wP\", g7: \"bP\", g8: \"bN\",\r\n    h1: \"wR\", h2: \"wP\", h7: \"bP\", h8: \"bR\",\r\n  });\r\n\r\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\r\n\r\n  const [isWhiteCastleKing, setIsWhiteCastleKing] = useState(true);\r\n  const [isWhiteCastleQueen, setIsWhiteCastleQueen] = useState(true);\r\n  const [isBlackCastleKing, setIsBlackCastleKing] = useState(true);\r\n  const [isBlackCastleQueen, setIsBlackCastleQueen] = useState(true);\r\n\r\n  const [promotionChoice, setPromotionChoice] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setGame(new Chess());\r\n  }, []);\r\n\r\n  // Function to prompt the user for promotion\r\n  function handlePromotion(sourceSquare, targetSquare) {\r\n    const isWhitePawn = position[sourceSquare] === \"wP\";\r\n    const isBlackPawn = position[sourceSquare] === \"bP\";\r\n\r\n    const promotionRank = isWhitePawn ? \"8\" : \"1\";\r\n\r\n    // Check if the piece is a pawn and reached the final rank\r\n    if (isWhitePawn && targetSquare[1] === promotionRank) {\r\n      return true;\r\n    }\r\n    if (isBlackPawn && targetSquare[1] === promotionRank) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function onPieceDrop(sourceSquare, targetSquare) {\r\n    const piece = position[sourceSquare];\r\n    if (!piece) return false; // No piece to move\r\n\r\n    // Check if it's the correct turn for the piece color\r\n    const isWhitePiece = piece.startsWith('w');\r\n    if (isWhiteTurn && !isWhitePiece) {\r\n      alert(\"It's white's turn, but the piece is black\");\r\n      return false;\r\n    }\r\n    if (!isWhiteTurn && isWhitePiece) {\r\n      alert(\"It's black's turn, but the piece is white\");\r\n      return false;\r\n    }\r\n\r\n    // Handle Promotion\r\n    if (handlePromotion(sourceSquare, targetSquare)) {\r\n      const pieceToPromote = window.prompt(\r\n        \"Promote to (q, r, b, n)?\", \r\n        \"q\"\r\n      );\r\n      const validPromotionPieces = ['q', 'r', 'b', 'n'];\r\n      const promotionPiece = validPromotionPieces.includes(pieceToPromote) ? pieceToPromote : 'q';\r\n\r\n      try {\r\n        game.move({\r\n          from: sourceSquare,\r\n          to: targetSquare,\r\n          promotion: promotionPiece\r\n        });\r\n      } catch (e) {\r\n        alert(\"Illegal move\");\r\n        return false;\r\n      }\r\n    } else {\r\n      try {\r\n        game.move({ from: sourceSquare, to: targetSquare });\r\n      } catch {\r\n        alert('Illegal move');\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Handle castling logic\r\n    if (sourceSquare === 'a1' && isWhiteCastleQueen) setIsWhiteCastleQueen(false);\r\n    if (sourceSquare === 'h1' && isWhiteCastleKing) setIsWhiteCastleKing(false);\r\n    if (sourceSquare === 'e1') {\r\n      setIsWhiteCastleKing(false);\r\n      setIsWhiteCastleQueen(false);\r\n    }\r\n    if (sourceSquare === 'a8' && isBlackCastleQueen) setIsBlackCastleQueen(false);\r\n    if (sourceSquare === 'h8' && isBlackCastleKing) setIsBlackCastleKing(false);\r\n    if (sourceSquare === 'e8') {\r\n      setIsBlackCastleKing(false);\r\n      setIsBlackCastleQueen(false);\r\n    }\r\n\r\n    // Handle en passant\r\n    const passantSquare = enPassant(sourceSquare, targetSquare);\r\n    if (passantSquare !== false) {\r\n      const newPosition = { ...position };\r\n      delete newPosition[sourceSquare];\r\n      newPosition[targetSquare] = piece;\r\n      delete newPosition[passantSquare];\r\n\r\n      setPosition(newPosition);\r\n      setIsWhiteTurn(!isWhiteTurn);\r\n      return true;\r\n    }\r\n\r\n    if (game.isCheckmate()) {\r\n      alert(isWhiteTurn ? \"Black wins by checkmate!\" : \"White wins by checkmate!\");\r\n      return true;\r\n    }\r\n\r\n    if (game.isDraw()) {\r\n      alert(\"The game is a draw!\");\r\n      return true;\r\n    }\r\n\r\n    const newPosition = { ...position };\r\n    delete newPosition[sourceSquare];\r\n    newPosition[targetSquare] = piece;\r\n\r\n    setPosition(newPosition);\r\n    setIsWhiteTurn(!isWhiteTurn);\r\n    return true;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Chessboard\">\r\n      <Chessboard\r\n        id=\"Basicboard\"\r\n        position={position}\r\n        onPieceDrop={onPieceDrop}\r\n        arePiecesDraggable={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}