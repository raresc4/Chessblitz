{"ast":null,"code":"var _jsxFileName = \"D:\\\\cod\\\\ChessBlitz\\\\frontend1\\\\src\\\\Components\\\\Chessboard2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Chessboard } from \"react-chessboard\";\nimport { Chess } from \"chess.js\";\nimport { enPassant } from \"../Functions/EnPassant.js\";\nimport \"../Styles/Chessboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard2() {\n  _s();\n  const [game, setGame] = useState();\n  const [position, setPosition] = useState({\n    a1: \"wR\",\n    a2: \"wP\",\n    a7: \"bP\",\n    a8: \"bR\",\n    b1: \"wN\",\n    b2: \"wP\",\n    b7: \"bP\",\n    b8: \"bN\",\n    c1: \"wB\",\n    c2: \"wP\",\n    c7: \"bP\",\n    c8: \"bB\",\n    d1: \"wQ\",\n    d2: \"wP\",\n    d7: \"bP\",\n    d8: \"bQ\",\n    e1: \"wK\",\n    e2: \"wP\",\n    e7: \"bP\",\n    e8: \"bK\",\n    f1: \"wB\",\n    f2: \"wP\",\n    f7: \"bP\",\n    f8: \"bB\",\n    g1: \"wN\",\n    g2: \"wP\",\n    g7: \"bP\",\n    g8: \"bN\",\n    h1: \"wR\",\n    h2: \"wP\",\n    h7: \"bP\",\n    h8: \"bR\"\n  });\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\n  const [isWhiteCastleKing, setIsWhiteCastleKing] = useState(true);\n  const [isWhiteCastleQueen, setIsWhiteCastleQueen] = useState(true);\n  const [isBlackCastleKing, setIsBlackCastleKing] = useState(true);\n  const [isBlackCastleQueen, setIsBlackCastleQueen] = useState(true);\n  useEffect(() => {\n    setGame(new Chess());\n    const response = axios.get(\"http://localhost:8080/crud/getUser/rares\", {\n      \"username\": \"rares\",\n      \"password\": \"rares\"\n    }).then(response => {\n      console.log(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  function promotion(piece, sourceSquare, targetSquare) {\n    game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: piece[1].toLowerCase()\n    });\n    const newPosition = {\n      ...position\n    };\n    delete newPosition[sourceSquare];\n    newPosition[targetSquare] = piece;\n    setPosition(newPosition);\n    setIsWhiteTurn(!isWhiteTurn);\n    return true;\n  }\n  function onPieceDrop(sourceSquare, targetSquare) {\n    if (sourceSquare[1] === '7' && position[sourceSquare] === 'wP' || sourceSquare[1] === '2' && position[sourceSquare] === 'bP') {\n      return true;\n    }\n    const piece = position[sourceSquare];\n    if (!piece) {\n      return false;\n    }\n    const isWhitePiece = piece.startsWith('w');\n    if (isWhiteTurn && !isWhitePiece) {\n      alert(\"It's white's turn, but the piece is black\");\n      return false;\n    }\n    if (!isWhiteTurn && isWhitePiece) {\n      alert(\"It's black turn, but the piece is white\");\n      return false;\n    }\n    try {\n      game.move({\n        from: sourceSquare,\n        to: targetSquare\n      });\n    } catch {\n      alert('illegal move');\n      return false;\n    }\n    if (sourceSquare === 'a1' && isWhiteCastleQueen) {\n      setIsWhiteCastleQueen(false);\n    }\n    if (sourceSquare === 'h1' && isWhiteCastleKing) {\n      setIsWhiteCastleKing(false);\n    }\n    if (sourceSquare === 'e1') {\n      setIsWhiteCastleKing(false);\n      setIsWhiteCastleQueen(false);\n    }\n    if (sourceSquare === 'a8' && isBlackCastleQueen) {\n      setIsBlackCastleQueen(false);\n    }\n    if (sourceSquare === 'h8' && isBlackCastleKing) {\n      setIsBlackCastleKing(false);\n    }\n    if (sourceSquare === 'e8') {\n      setIsBlackCastleKing(false);\n      setIsBlackCastleQueen(false);\n    }\n    if (sourceSquare === 'e1' && targetSquare === 'g1') {\n      if (!isWhiteCastleKing) {\n        alert('Castling on the white king side is no longer allowed');\n        return false;\n      }\n      const newPosition = {\n        ...position\n      };\n      delete newPosition['e1'];\n      newPosition['g1'] = 'wK';\n      delete newPosition['h1'];\n      newPosition['f1'] = 'wR';\n      setPosition(newPosition);\n      setIsWhiteCastleKing(false);\n      setIsWhiteCastleQueen(false);\n      setIsWhiteTurn(false);\n      return true;\n    }\n    if (sourceSquare === 'e1' && targetSquare === 'c1') {\n      if (!isWhiteCastleQueen) {\n        alert('Castling on the white queen side is no longer allowed');\n        return false;\n      }\n      const newPosition = {\n        ...position\n      };\n      delete newPosition['e1'];\n      newPosition['c1'] = 'wK';\n      delete newPosition['a1'];\n      newPosition['d1'] = 'wR';\n      setPosition(newPosition);\n      setIsWhiteCastleKing(false);\n      setIsWhiteCastleQueen(false);\n      setIsWhiteTurn(false);\n      return true;\n    }\n    if (sourceSquare === 'e8' && targetSquare === 'g8') {\n      if (!isBlackCastleKing) {\n        alert('Castling on the black king side is no longer allowed');\n        return false;\n      }\n      const newPosition = {\n        ...position\n      };\n      delete newPosition['e8'];\n      newPosition['g8'] = 'bK';\n      delete newPosition['h8'];\n      newPosition['f8'] = 'bR';\n      setPosition(newPosition);\n      setIsBlackCastleKing(false);\n      setIsBlackCastleQueen(false);\n      setIsWhiteTurn(true);\n      return true;\n    }\n    if (sourceSquare === 'e8' && targetSquare === 'c8') {\n      if (!isBlackCastleQueen) {\n        alert('Castling on the black queen side is no longer allowed');\n        return false;\n      }\n      const newPosition = {\n        ...position\n      };\n      delete newPosition['e8'];\n      newPosition['c8'] = 'bK';\n      delete newPosition['a8'];\n      newPosition['d8'] = 'bR';\n      setPosition(newPosition);\n      setIsBlackCastleKing(false);\n      setIsBlackCastleQueen(false);\n      setIsWhiteTurn(true);\n      return true;\n    }\n    const passantSquare = enPassant(sourceSquare, targetSquare);\n    if (passantSquare !== false) {\n      const newPosition = {\n        ...position\n      };\n      delete newPosition[sourceSquare];\n      newPosition[targetSquare] = piece;\n      delete newPosition[passantSquare];\n      setPosition(newPosition);\n      setIsWhiteTurn(!isWhiteTurn);\n      console.log(`Piece ${piece} moved from ${sourceSquare} to ${targetSquare}`);\n      return true;\n    }\n    if (game.isCheckmate()) {\n      alert(isWhiteTurn ? \"Black wins by checkmate!\" : \"White wins by checkmate!\");\n      return true;\n    }\n    if (game.isDraw()) {\n      alert(\"The game is a draw!\");\n      return true;\n    }\n    const newPosition = {\n      ...position\n    };\n    delete newPosition[sourceSquare];\n    newPosition[targetSquare] = piece;\n    setPosition(newPosition);\n    setIsWhiteTurn(!isWhiteTurn);\n    console.log(`Piece ${piece} moved from ${sourceSquare} to ${targetSquare}`);\n    return true;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Chessboard\",\n    children: /*#__PURE__*/_jsxDEV(Chessboard, {\n      id: \"Basicboard\",\n      position: position,\n      onPieceDrop: onPieceDrop,\n      arePiecesDraggable: true,\n      onPromotionPieceSelect: promotion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard2, \"3H8epd4GMbx5KKVemOUYUPLe34Y=\");\n_c = Chessboard2;\nvar _c;\n$RefreshReg$(_c, \"Chessboard2\");","map":{"version":3,"names":["React","useEffect","useState","axios","Chessboard","Chess","enPassant","jsxDEV","_jsxDEV","Chessboard2","_s","game","setGame","position","setPosition","a1","a2","a7","a8","b1","b2","b7","b8","c1","c2","c7","c8","d1","d2","d7","d8","e1","e2","e7","e8","f1","f2","f7","f8","g1","g2","g7","g8","h1","h2","h7","h8","isWhiteTurn","setIsWhiteTurn","isWhiteCastleKing","setIsWhiteCastleKing","isWhiteCastleQueen","setIsWhiteCastleQueen","isBlackCastleKing","setIsBlackCastleKing","isBlackCastleQueen","setIsBlackCastleQueen","response","get","then","console","log","data","catch","error","promotion","piece","sourceSquare","targetSquare","move","from","to","toLowerCase","newPosition","onPieceDrop","isWhitePiece","startsWith","alert","passantSquare","isCheckmate","isDraw","className","children","id","arePiecesDraggable","onPromotionPieceSelect","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/cod/ChessBlitz/frontend1/src/Components/Chessboard2.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport { Chess }  from \"chess.js\";\r\nimport { enPassant } from \"../Functions/EnPassant.js\";\r\nimport \"../Styles/Chessboard.css\";\r\n\r\nexport default function Chessboard2() {\r\n  const [game, setGame] = useState();\r\n  const [position, setPosition] = useState({\r\n    a1: \"wR\", a2: \"wP\", a7: \"bP\", a8: \"bR\",\r\n    b1: \"wN\", b2: \"wP\", b7: \"bP\", b8: \"bN\",\r\n    c1: \"wB\", c2: \"wP\", c7: \"bP\", c8: \"bB\",\r\n    d1: \"wQ\", d2: \"wP\", d7: \"bP\", d8: \"bQ\",\r\n    e1: \"wK\", e2: \"wP\", e7: \"bP\", e8: \"bK\",\r\n    f1: \"wB\", f2: \"wP\", f7: \"bP\", f8: \"bB\",\r\n    g1: \"wN\", g2: \"wP\", g7: \"bP\", g8: \"bN\",\r\n    h1: \"wR\", h2: \"wP\", h7: \"bP\", h8: \"bR\",\r\n  });\r\n\r\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\r\n\r\n  const [isWhiteCastleKing, setIsWhiteCastleKing] = useState(true);\r\n  const [isWhiteCastleQueen, setIsWhiteCastleQueen] = useState(true);\r\n  const [isBlackCastleKing, setIsBlackCastleKing] = useState(true);\r\n  const [isBlackCastleQueen, setIsBlackCastleQueen] = useState(true);\r\n\r\n  useEffect(()=>{\r\n    setGame(new Chess());\r\n    const response = axios.get(\"http://localhost:8080/crud/getUser/rares\",{\"username\" : \"rares\",\"password\" : \"rares\"}).then((response) => {\r\n      console.log(response.data);}).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  \r\n\r\n  function promotion(piece,sourceSquare,targetSquare) {\r\n    \r\n    game.move({ from : sourceSquare, to : targetSquare, promotion : piece[1].toLowerCase() });\r\n\r\n    const newPosition = { ...position };\r\n    delete newPosition[sourceSquare]; \r\n    newPosition[targetSquare] = piece; \r\n\r\n    setPosition(newPosition); \r\n    setIsWhiteTurn(!isWhiteTurn); \r\n\r\n    return true;\r\n  }\r\n\r\n  function onPieceDrop(sourceSquare, targetSquare) {\r\n    if((sourceSquare[1] === '7' && position[sourceSquare] === 'wP') || (sourceSquare[1] === '2' && position[sourceSquare] === 'bP')) {\r\n      return true;\r\n    }\r\n    \r\n    const piece = position[sourceSquare];\r\n    if (!piece) {\r\n    return false;\r\n    } \r\n\r\n    \r\n    const isWhitePiece = piece.startsWith('w');\r\n    if (isWhiteTurn && !isWhitePiece) { \r\n    alert(\"It's white's turn, but the piece is black\");\r\n    return false; \r\n    }\r\n    if (!isWhiteTurn && isWhitePiece) {\r\n      alert(\"It's black turn, but the piece is white\");\r\n      return false;\r\n    }\r\n\r\n    try { \r\n      game.move({ from : sourceSquare, to : targetSquare });\r\n    } catch {\r\n      alert('illegal move');\r\n      return false;\r\n    }\r\n    \r\n\r\n    if(sourceSquare === 'a1' && isWhiteCastleQueen)\r\n    {\r\n      setIsWhiteCastleQueen(false);\r\n    }\r\n\r\n    if(sourceSquare === 'h1' && isWhiteCastleKing)\r\n    {\r\n      setIsWhiteCastleKing(false);\r\n    }\r\n\r\n    if(sourceSquare === 'e1')\r\n    {\r\n      setIsWhiteCastleKing(false);\r\n      setIsWhiteCastleQueen(false);\r\n    }\r\n\r\n    if(sourceSquare === 'a8' && isBlackCastleQueen)\r\n    {\r\n      setIsBlackCastleQueen(false);\r\n    }\r\n  \r\n    if(sourceSquare === 'h8' && isBlackCastleKing)\r\n    {\r\n      setIsBlackCastleKing(false);\r\n    }\r\n  \r\n    if(sourceSquare === 'e8')\r\n    {\r\n      setIsBlackCastleKing(false);\r\n      setIsBlackCastleQueen(false);\r\n    }\r\n\r\n    if (sourceSquare === 'e1' && targetSquare === 'g1') { \r\n      if (!isWhiteCastleKing) {\r\n        alert('Castling on the white king side is no longer allowed');\r\n        return false;\r\n      }\r\n    \r\n      \r\n      const newPosition = { ...position };\r\n      delete newPosition['e1']; \r\n      newPosition['g1'] = 'wK'; \r\n      delete newPosition['h1']; \r\n      newPosition['f1'] = 'wR'; \r\n    \r\n      setPosition(newPosition);\r\n      setIsWhiteCastleKing(false);\r\n      setIsWhiteCastleQueen(false);\r\n      setIsWhiteTurn(false); \r\n      return true;\r\n    }\r\n\r\n    if (sourceSquare === 'e1' && targetSquare === 'c1') { \r\n      if (!isWhiteCastleQueen) {\r\n        alert('Castling on the white queen side is no longer allowed');\r\n        return false;\r\n      }\r\n\r\n      \r\n      const newPosition = { ...position };\r\n      delete newPosition['e1']; \r\n      newPosition['c1'] = 'wK'; \r\n      delete newPosition['a1']; \r\n      newPosition['d1'] = 'wR';\r\n\r\n      setPosition(newPosition);\r\n      setIsWhiteCastleKing(false);\r\n      setIsWhiteCastleQueen(false);\r\n      setIsWhiteTurn(false); \r\n      return true;\r\n    }\r\n\r\n    if (sourceSquare === 'e8' && targetSquare === 'g8') { \r\n      if (!isBlackCastleKing) {\r\n        alert('Castling on the black king side is no longer allowed');\r\n        return false;\r\n      }\r\n\r\n      const newPosition = { ...position };\r\n      delete newPosition['e8'];\r\n      newPosition['g8'] = 'bK'; \r\n      delete newPosition['h8']; \r\n      newPosition['f8'] = 'bR'; \r\n\r\n      setPosition(newPosition);\r\n      setIsBlackCastleKing(false);\r\n      setIsBlackCastleQueen(false);\r\n      setIsWhiteTurn(true); \r\n      return true;\r\n    }\r\n\r\n    if(sourceSquare === 'e8' && targetSquare === 'c8') { \r\n      if (!isBlackCastleQueen) {\r\n        alert('Castling on the black queen side is no longer allowed');\r\n        return false;\r\n      }\r\n\r\n      \r\n      const newPosition = { ...position };\r\n      delete newPosition['e8'];\r\n      newPosition['c8'] = 'bK';\r\n      delete newPosition['a8']; \r\n      newPosition['d8'] = 'bR'; \r\n\r\n      setPosition(newPosition);\r\n      setIsBlackCastleKing(false);\r\n      setIsBlackCastleQueen(false);\r\n      setIsWhiteTurn(true); \r\n      return true;\r\n    }\r\n\r\n    const passantSquare = enPassant(sourceSquare, targetSquare);\r\n\r\n    if(passantSquare !== false)\r\n    {\r\n        const newPosition = { ...position };\r\n        delete newPosition[sourceSquare]; \r\n        newPosition[targetSquare] = piece; \r\n        delete newPosition[passantSquare]; \r\n\r\n        setPosition(newPosition);\r\n        setIsWhiteTurn(!isWhiteTurn); \r\n\r\n        console.log(`Piece ${piece} moved from ${sourceSquare} to ${targetSquare}`);\r\n        return true;\r\n    } \r\n\r\n    \r\n\r\n    if (game.isCheckmate()) {\r\n      alert(isWhiteTurn ? \"Black wins by checkmate!\" : \"White wins by checkmate!\");\r\n      \r\n      return true; \r\n    }\r\n\r\n    if(game.isDraw()) {\r\n      alert(\"The game is a draw!\");\r\n      \r\n      return true; \r\n    }\r\n\r\n    const newPosition = { ...position };\r\n    delete newPosition[sourceSquare]; \r\n    newPosition[targetSquare] = piece; \r\n    setPosition(newPosition); \r\n    setIsWhiteTurn(!isWhiteTurn); \r\n    console.log(`Piece ${piece} moved from ${sourceSquare} to ${targetSquare}`);\r\n    return true;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Chessboard\">\r\n      <Chessboard\r\n        id=\"Basicboard\"\r\n        position={position} \r\n        onPieceDrop={onPieceDrop} \r\n        arePiecesDraggable={true} \r\n        onPromotionPieceSelect={promotion} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,KAAK,QAAS,UAAU;AACjC,SAASC,SAAS,QAAQ,2BAA2B;AACrD,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,CAAC;EAClC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC;IACvCa,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IACtCC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IACtCC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IACtCC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IACtCC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IACtCC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IACtCC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IACtCC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE;EACpC,CAAC,CAAC;EAEF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG9C,QAAQ,CAAC,IAAI,CAAC;EAEpD,MAAM,CAAC+C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhD,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACiD,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGlD,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACmD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGpD,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACqD,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGtD,QAAQ,CAAC,IAAI,CAAC;EAElED,SAAS,CAAC,MAAI;IACZW,OAAO,CAAC,IAAIP,KAAK,CAAC,CAAC,CAAC;IACpB,MAAMoD,QAAQ,GAAGtD,KAAK,CAACuD,GAAG,CAAC,0CAA0C,EAAC;MAAC,UAAU,EAAG,OAAO;MAAC,UAAU,EAAG;IAAO,CAAC,CAAC,CAACC,IAAI,CAAEF,QAAQ,IAAK;MACpIG,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACK,IAAI,CAAC;IAAC,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;MAC7CJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IACpB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAIN,SAASC,SAASA,CAACC,KAAK,EAACC,YAAY,EAACC,YAAY,EAAE;IAElDzD,IAAI,CAAC0D,IAAI,CAAC;MAAEC,IAAI,EAAGH,YAAY;MAAEI,EAAE,EAAGH,YAAY;MAAEH,SAAS,EAAGC,KAAK,CAAC,CAAC,CAAC,CAACM,WAAW,CAAC;IAAE,CAAC,CAAC;IAEzF,MAAMC,WAAW,GAAG;MAAE,GAAG5D;IAAS,CAAC;IACnC,OAAO4D,WAAW,CAACN,YAAY,CAAC;IAChCM,WAAW,CAACL,YAAY,CAAC,GAAGF,KAAK;IAEjCpD,WAAW,CAAC2D,WAAW,CAAC;IACxBzB,cAAc,CAAC,CAACD,WAAW,CAAC;IAE5B,OAAO,IAAI;EACb;EAEA,SAAS2B,WAAWA,CAACP,YAAY,EAAEC,YAAY,EAAE;IAC/C,IAAID,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,IAAItD,QAAQ,CAACsD,YAAY,CAAC,KAAK,IAAI,IAAMA,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,IAAItD,QAAQ,CAACsD,YAAY,CAAC,KAAK,IAAK,EAAE;MAC/H,OAAO,IAAI;IACb;IAEA,MAAMD,KAAK,GAAGrD,QAAQ,CAACsD,YAAY,CAAC;IACpC,IAAI,CAACD,KAAK,EAAE;MACZ,OAAO,KAAK;IACZ;IAGA,MAAMS,YAAY,GAAGT,KAAK,CAACU,UAAU,CAAC,GAAG,CAAC;IAC1C,IAAI7B,WAAW,IAAI,CAAC4B,YAAY,EAAE;MAClCE,KAAK,CAAC,2CAA2C,CAAC;MAClD,OAAO,KAAK;IACZ;IACA,IAAI,CAAC9B,WAAW,IAAI4B,YAAY,EAAE;MAChCE,KAAK,CAAC,yCAAyC,CAAC;MAChD,OAAO,KAAK;IACd;IAEA,IAAI;MACFlE,IAAI,CAAC0D,IAAI,CAAC;QAAEC,IAAI,EAAGH,YAAY;QAAEI,EAAE,EAAGH;MAAa,CAAC,CAAC;IACvD,CAAC,CAAC,MAAM;MACNS,KAAK,CAAC,cAAc,CAAC;MACrB,OAAO,KAAK;IACd;IAGA,IAAGV,YAAY,KAAK,IAAI,IAAIhB,kBAAkB,EAC9C;MACEC,qBAAqB,CAAC,KAAK,CAAC;IAC9B;IAEA,IAAGe,YAAY,KAAK,IAAI,IAAIlB,iBAAiB,EAC7C;MACEC,oBAAoB,CAAC,KAAK,CAAC;IAC7B;IAEA,IAAGiB,YAAY,KAAK,IAAI,EACxB;MACEjB,oBAAoB,CAAC,KAAK,CAAC;MAC3BE,qBAAqB,CAAC,KAAK,CAAC;IAC9B;IAEA,IAAGe,YAAY,KAAK,IAAI,IAAIZ,kBAAkB,EAC9C;MACEC,qBAAqB,CAAC,KAAK,CAAC;IAC9B;IAEA,IAAGW,YAAY,KAAK,IAAI,IAAId,iBAAiB,EAC7C;MACEC,oBAAoB,CAAC,KAAK,CAAC;IAC7B;IAEA,IAAGa,YAAY,KAAK,IAAI,EACxB;MACEb,oBAAoB,CAAC,KAAK,CAAC;MAC3BE,qBAAqB,CAAC,KAAK,CAAC;IAC9B;IAEA,IAAIW,YAAY,KAAK,IAAI,IAAIC,YAAY,KAAK,IAAI,EAAE;MAClD,IAAI,CAACnB,iBAAiB,EAAE;QACtB4B,KAAK,CAAC,sDAAsD,CAAC;QAC7D,OAAO,KAAK;MACd;MAGA,MAAMJ,WAAW,GAAG;QAAE,GAAG5D;MAAS,CAAC;MACnC,OAAO4D,WAAW,CAAC,IAAI,CAAC;MACxBA,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI;MACxB,OAAOA,WAAW,CAAC,IAAI,CAAC;MACxBA,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI;MAExB3D,WAAW,CAAC2D,WAAW,CAAC;MACxBvB,oBAAoB,CAAC,KAAK,CAAC;MAC3BE,qBAAqB,CAAC,KAAK,CAAC;MAC5BJ,cAAc,CAAC,KAAK,CAAC;MACrB,OAAO,IAAI;IACb;IAEA,IAAImB,YAAY,KAAK,IAAI,IAAIC,YAAY,KAAK,IAAI,EAAE;MAClD,IAAI,CAACjB,kBAAkB,EAAE;QACvB0B,KAAK,CAAC,uDAAuD,CAAC;QAC9D,OAAO,KAAK;MACd;MAGA,MAAMJ,WAAW,GAAG;QAAE,GAAG5D;MAAS,CAAC;MACnC,OAAO4D,WAAW,CAAC,IAAI,CAAC;MACxBA,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI;MACxB,OAAOA,WAAW,CAAC,IAAI,CAAC;MACxBA,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI;MAExB3D,WAAW,CAAC2D,WAAW,CAAC;MACxBvB,oBAAoB,CAAC,KAAK,CAAC;MAC3BE,qBAAqB,CAAC,KAAK,CAAC;MAC5BJ,cAAc,CAAC,KAAK,CAAC;MACrB,OAAO,IAAI;IACb;IAEA,IAAImB,YAAY,KAAK,IAAI,IAAIC,YAAY,KAAK,IAAI,EAAE;MAClD,IAAI,CAACf,iBAAiB,EAAE;QACtBwB,KAAK,CAAC,sDAAsD,CAAC;QAC7D,OAAO,KAAK;MACd;MAEA,MAAMJ,WAAW,GAAG;QAAE,GAAG5D;MAAS,CAAC;MACnC,OAAO4D,WAAW,CAAC,IAAI,CAAC;MACxBA,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI;MACxB,OAAOA,WAAW,CAAC,IAAI,CAAC;MACxBA,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI;MAExB3D,WAAW,CAAC2D,WAAW,CAAC;MACxBnB,oBAAoB,CAAC,KAAK,CAAC;MAC3BE,qBAAqB,CAAC,KAAK,CAAC;MAC5BR,cAAc,CAAC,IAAI,CAAC;MACpB,OAAO,IAAI;IACb;IAEA,IAAGmB,YAAY,KAAK,IAAI,IAAIC,YAAY,KAAK,IAAI,EAAE;MACjD,IAAI,CAACb,kBAAkB,EAAE;QACvBsB,KAAK,CAAC,uDAAuD,CAAC;QAC9D,OAAO,KAAK;MACd;MAGA,MAAMJ,WAAW,GAAG;QAAE,GAAG5D;MAAS,CAAC;MACnC,OAAO4D,WAAW,CAAC,IAAI,CAAC;MACxBA,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI;MACxB,OAAOA,WAAW,CAAC,IAAI,CAAC;MACxBA,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI;MAExB3D,WAAW,CAAC2D,WAAW,CAAC;MACxBnB,oBAAoB,CAAC,KAAK,CAAC;MAC3BE,qBAAqB,CAAC,KAAK,CAAC;MAC5BR,cAAc,CAAC,IAAI,CAAC;MACpB,OAAO,IAAI;IACb;IAEA,MAAM8B,aAAa,GAAGxE,SAAS,CAAC6D,YAAY,EAAEC,YAAY,CAAC;IAE3D,IAAGU,aAAa,KAAK,KAAK,EAC1B;MACI,MAAML,WAAW,GAAG;QAAE,GAAG5D;MAAS,CAAC;MACnC,OAAO4D,WAAW,CAACN,YAAY,CAAC;MAChCM,WAAW,CAACL,YAAY,CAAC,GAAGF,KAAK;MACjC,OAAOO,WAAW,CAACK,aAAa,CAAC;MAEjChE,WAAW,CAAC2D,WAAW,CAAC;MACxBzB,cAAc,CAAC,CAACD,WAAW,CAAC;MAE5Ba,OAAO,CAACC,GAAG,CAAC,SAASK,KAAK,eAAeC,YAAY,OAAOC,YAAY,EAAE,CAAC;MAC3E,OAAO,IAAI;IACf;IAIA,IAAIzD,IAAI,CAACoE,WAAW,CAAC,CAAC,EAAE;MACtBF,KAAK,CAAC9B,WAAW,GAAG,0BAA0B,GAAG,0BAA0B,CAAC;MAE5E,OAAO,IAAI;IACb;IAEA,IAAGpC,IAAI,CAACqE,MAAM,CAAC,CAAC,EAAE;MAChBH,KAAK,CAAC,qBAAqB,CAAC;MAE5B,OAAO,IAAI;IACb;IAEA,MAAMJ,WAAW,GAAG;MAAE,GAAG5D;IAAS,CAAC;IACnC,OAAO4D,WAAW,CAACN,YAAY,CAAC;IAChCM,WAAW,CAACL,YAAY,CAAC,GAAGF,KAAK;IACjCpD,WAAW,CAAC2D,WAAW,CAAC;IACxBzB,cAAc,CAAC,CAACD,WAAW,CAAC;IAC5Ba,OAAO,CAACC,GAAG,CAAC,SAASK,KAAK,eAAeC,YAAY,OAAOC,YAAY,EAAE,CAAC;IAC3E,OAAO,IAAI;EACb;EAEA,oBACE5D,OAAA;IAAKyE,SAAS,EAAC,YAAY;IAAAC,QAAA,eACzB1E,OAAA,CAACJ,UAAU;MACT+E,EAAE,EAAC,YAAY;MACftE,QAAQ,EAAEA,QAAS;MACnB6D,WAAW,EAAEA,WAAY;MACzBU,kBAAkB,EAAE,IAAK;MACzBC,sBAAsB,EAAEpB;IAAU;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC/E,EAAA,CA1OuBD,WAAW;AAAAiF,EAAA,GAAXjF,WAAW;AAAA,IAAAiF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}