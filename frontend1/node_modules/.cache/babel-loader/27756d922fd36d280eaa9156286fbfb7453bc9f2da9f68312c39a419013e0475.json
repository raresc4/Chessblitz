{"ast":null,"code":"var _jsxFileName = \"D:\\\\cod\\\\ChessBlitz\\\\frontend1\\\\src\\\\Components\\\\Chessboard2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Chessboard } from \"react-chessboard\";\nimport { Chess } from \"chess.js\";\nimport { enPassant } from \"../Functions/EnPassant.js\";\nimport SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nimport \"../Styles/Chessboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard2() {\n  _s();\n  const [game, setGame] = useState(new Chess());\n  const [position, setPosition] = useState({\n    a1: \"wR\",\n    a2: \"wP\",\n    a7: \"bP\",\n    a8: \"bR\",\n    b1: \"wN\",\n    b2: \"wP\",\n    b7: \"bP\",\n    b8: \"bN\",\n    c1: \"wB\",\n    c2: \"wP\",\n    c7: \"bP\",\n    c8: \"bB\",\n    d1: \"wQ\",\n    d2: \"wP\",\n    d7: \"bP\",\n    d8: \"bQ\",\n    e1: \"wK\",\n    e2: \"wP\",\n    e7: \"bP\",\n    e8: \"bK\",\n    f1: \"wB\",\n    f2: \"wP\",\n    f7: \"bP\",\n    f8: \"bB\",\n    g1: \"wN\",\n    g2: \"wP\",\n    g7: \"bP\",\n    g8: \"bN\",\n    h1: \"wR\",\n    h2: \"wP\",\n    h7: \"bP\",\n    h8: \"bR\"\n  });\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\n  useEffect(() => {\n    const socket = new SockJS('http://localhost:8080/ws');\n    const stompClient = new Client({\n      webSocketFactory: () => socket,\n      debug: str => console.log(str)\n    });\n    stompClient.onConnect = frame => {\n      console.log('Connected: ' + frame);\n\n      // Subscribe to the topic to receive moves\n      stompClient.subscribe('/topic/public', message => {\n        const move = JSON.parse(message.body);\n        handleReceivedMove(move);\n      });\n    };\n    stompClient.activate();\n    return () => {\n      stompClient.deactivate();\n    };\n  }, []);\n\n  // Handle the move received from the server\n  function handleReceivedMove(move) {\n    const {\n      from,\n      to,\n      promotion\n    } = move;\n\n    // Apply the move to the local game instance\n    game.move({\n      from,\n      to,\n      promotion\n    });\n\n    // Update board position based on the new game state\n    const newPosition = {\n      ...position\n    };\n    delete newPosition[from]; // Remove piece from source square\n    newPosition[to] = promotion ? promotion : position[from]; // Move piece to target square\n\n    setPosition(newPosition);\n    setIsWhiteTurn(!isWhiteTurn); // Switch turns\n  }\n  function onPieceDrop(sourceSquare, targetSquare) {\n    const piece = position[sourceSquare];\n    if (!piece) return false; // No piece to move\n\n    // Check if it's the correct turn for the piece color\n    const isWhitePiece = piece.startsWith('w');\n    if (isWhiteTurn && !isWhitePiece) {\n      alert(\"It's white's turn, but the piece is black\");\n      return false;\n    }\n    if (!isWhiteTurn && isWhitePiece) {\n      alert(\"It's black's turn, but the piece is white\");\n      return false;\n    }\n\n    // Perform the move in the game logic\n    try {\n      game.move({\n        from: sourceSquare,\n        to: targetSquare\n      });\n\n      // Send the move to the server\n      sendMoveToServer({\n        from: sourceSquare,\n        to: targetSquare\n      });\n      const newPosition = {\n        ...position\n      };\n      delete newPosition[sourceSquare]; // Remove piece from source square\n      newPosition[targetSquare] = piece; // Place piece on target square\n\n      setPosition(newPosition); // Update board position\n      setIsWhiteTurn(!isWhiteTurn); // Switch turns\n      return true;\n    } catch {\n      alert('Illegal move');\n      return false;\n    }\n  }\n\n  // Send the move to the server\n  function sendMoveToServer(move) {\n    const socket = new SockJS('http://localhost:8080/ws');\n    const stompClient = new Client({\n      webSocketFactory: () => socket,\n      debug: str => console.log(str)\n    });\n    stompClient.onConnect = frame => {\n      stompClient.send('/app/message', {}, JSON.stringify(move));\n    };\n    stompClient.activate();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Chessboard\",\n    children: /*#__PURE__*/_jsxDEV(Chessboard, {\n      id: \"Basicboard\",\n      position: position // Pass custom board position\n      ,\n      onPieceDrop: onPieceDrop // Handle piece drop\n      ,\n      arePiecesDraggable: true // Make pieces draggable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard2, \"4F/IMFDntbzgRJbj0DxI8qgZdKU=\");\n_c = Chessboard2;\nvar _c;\n$RefreshReg$(_c, \"Chessboard2\");","map":{"version":3,"names":["React","useEffect","useState","Chessboard","Chess","enPassant","SockJS","Client","jsxDEV","_jsxDEV","Chessboard2","_s","game","setGame","position","setPosition","a1","a2","a7","a8","b1","b2","b7","b8","c1","c2","c7","c8","d1","d2","d7","d8","e1","e2","e7","e8","f1","f2","f7","f8","g1","g2","g7","g8","h1","h2","h7","h8","isWhiteTurn","setIsWhiteTurn","socket","stompClient","webSocketFactory","debug","str","console","log","onConnect","frame","subscribe","message","move","JSON","parse","body","handleReceivedMove","activate","deactivate","from","to","promotion","newPosition","onPieceDrop","sourceSquare","targetSquare","piece","isWhitePiece","startsWith","alert","sendMoveToServer","send","stringify","className","children","id","arePiecesDraggable","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/cod/ChessBlitz/frontend1/src/Components/Chessboard2.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport { Chess } from \"chess.js\";\r\nimport { enPassant } from \"../Functions/EnPassant.js\";\r\nimport SockJS from 'sockjs-client';\r\nimport { Client } from '@stomp/stompjs';\r\nimport \"../Styles/Chessboard.css\";\r\n\r\nexport default function Chessboard2() {\r\n  const [game, setGame] = useState(new Chess());\r\n  const [position, setPosition] = useState({\r\n    a1: \"wR\", a2: \"wP\", a7: \"bP\", a8: \"bR\",\r\n    b1: \"wN\", b2: \"wP\", b7: \"bP\", b8: \"bN\",\r\n    c1: \"wB\", c2: \"wP\", c7: \"bP\", c8: \"bB\",\r\n    d1: \"wQ\", d2: \"wP\", d7: \"bP\", d8: \"bQ\",\r\n    e1: \"wK\", e2: \"wP\", e7: \"bP\", e8: \"bK\",\r\n    f1: \"wB\", f2: \"wP\", f7: \"bP\", f8: \"bB\",\r\n    g1: \"wN\", g2: \"wP\", g7: \"bP\", g8: \"bN\",\r\n    h1: \"wR\", h2: \"wP\", h7: \"bP\", h8: \"bR\",\r\n  });\r\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const socket = new SockJS('http://localhost:8080/ws');\r\n    const stompClient = new Client({\r\n      webSocketFactory: () => socket,\r\n      debug: (str) => console.log(str),\r\n    });\r\n\r\n    stompClient.onConnect = (frame) => {\r\n      console.log('Connected: ' + frame);\r\n\r\n      // Subscribe to the topic to receive moves\r\n      stompClient.subscribe('/topic/public', (message) => {\r\n        const move = JSON.parse(message.body);\r\n        handleReceivedMove(move);\r\n      });\r\n    };\r\n\r\n    stompClient.activate();\r\n\r\n    return () => {\r\n      stompClient.deactivate();\r\n    };\r\n  }, []);\r\n\r\n  // Handle the move received from the server\r\n  function handleReceivedMove(move) {\r\n    const { from, to, promotion } = move;\r\n\r\n    // Apply the move to the local game instance\r\n    game.move({ from, to, promotion });\r\n\r\n    // Update board position based on the new game state\r\n    const newPosition = { ...position };\r\n    delete newPosition[from]; // Remove piece from source square\r\n    newPosition[to] = promotion ? promotion : position[from]; // Move piece to target square\r\n\r\n    setPosition(newPosition);\r\n    setIsWhiteTurn(!isWhiteTurn); // Switch turns\r\n  }\r\n\r\n  function onPieceDrop(sourceSquare, targetSquare) {\r\n    const piece = position[sourceSquare];\r\n    if (!piece) return false; // No piece to move\r\n\r\n    // Check if it's the correct turn for the piece color\r\n    const isWhitePiece = piece.startsWith('w');\r\n    if (isWhiteTurn && !isWhitePiece) {\r\n      alert(\"It's white's turn, but the piece is black\");\r\n      return false;\r\n    }\r\n    if (!isWhiteTurn && isWhitePiece) {\r\n      alert(\"It's black's turn, but the piece is white\");\r\n      return false;\r\n    }\r\n\r\n    // Perform the move in the game logic\r\n    try {\r\n      game.move({ from: sourceSquare, to: targetSquare });\r\n\r\n      // Send the move to the server\r\n      sendMoveToServer({ from: sourceSquare, to: targetSquare });\r\n\r\n      const newPosition = { ...position };\r\n      delete newPosition[sourceSquare]; // Remove piece from source square\r\n      newPosition[targetSquare] = piece; // Place piece on target square\r\n\r\n      setPosition(newPosition); // Update board position\r\n      setIsWhiteTurn(!isWhiteTurn); // Switch turns\r\n      return true;\r\n    } catch {\r\n      alert('Illegal move');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Send the move to the server\r\n  function sendMoveToServer(move) {\r\n    const socket = new SockJS('http://localhost:8080/ws');\r\n    const stompClient = new Client({\r\n      webSocketFactory: () => socket,\r\n      debug: (str) => console.log(str),\r\n    });\r\n\r\n    stompClient.onConnect = (frame) => {\r\n      stompClient.send('/app/message', {}, JSON.stringify(move));\r\n    };\r\n\r\n    stompClient.activate();\r\n  }\r\n\r\n  return (\r\n    <div className=\"Chessboard\">\r\n      <Chessboard\r\n        id=\"Basicboard\"\r\n        position={position} // Pass custom board position\r\n        onPieceDrop={onPieceDrop} // Handle piece drop\r\n        arePiecesDraggable={true} // Make pieces draggable\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}