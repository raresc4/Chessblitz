{"ast":null,"code":"var _jsxFileName = \"D:\\\\cod\\\\ChessBlitz\\\\frontend\\\\src\\\\Components\\\\Chessboard2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Chessboard } from \"react-chessboard\";\nimport { Chess } from \"chess.js\";\nimport \"../Styles/Chessboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard2() {\n  _s();\n  const [game, setGame] = useState(new Chess());\n  const [position, setPosition] = useState(game.fen());\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\n  const [promotionSquare, setPromotionSquare] = useState(null);\n  const [promoteFromSquare, setPromoteFromSquare] = useState(null);\n\n  // Handle piece drop (regular move and check for promotion)\n  const onPieceDrop = (sourceSquare, targetSquare) => {\n    const move = game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\" // Always promote to a queen by default (if promotion happens)\n    });\n    if (move && move.flags.includes(\"p\")) {\n      // Check if the move resulted in a promotion\n      setPromotionSquare(targetSquare); // Set the square for promotion\n      setPromoteFromSquare(sourceSquare); // Set the source square for promotion\n      return false; // Prevent the move from completing until promotion piece is chosen\n    }\n    if (move) {\n      setPosition(game.fen());\n      setIsWhiteTurn(!isWhiteTurn);\n    }\n    return move ? true : false;\n  };\n\n  // Function to handle promotion selection (Queen, Rook, Bishop, Knight)\n  const handlePromotionSelection = piece => {\n    if (promotionSquare && promoteFromSquare) {\n      // Make the promotion move with the selected piece\n      game.move({\n        from: promoteFromSquare,\n        to: promotionSquare,\n        promotion: piece\n      });\n      setPosition(game.fen());\n      setPromotionSquare(null); // Clear promotion state\n      setPromoteFromSquare(null);\n      setIsWhiteTurn(!isWhiteTurn); // Switch turn after promotion\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Chessboard\",\n    children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n      id: \"Basicboard\",\n      position: position,\n      onPieceDrop: onPieceDrop,\n      arePiecesDraggable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), promotionSquare && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"promotion-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePromotionSelection(\"q\"),\n        children: \"Queen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePromotionSelection(\"r\"),\n        children: \"Rook\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePromotionSelection(\"b\"),\n        children: \"Bishop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePromotionSelection(\"n\"),\n        children: \"Knight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard2, \"teG1A++EELhyZ7m8DDQelfJmZOk=\");\n_c = Chessboard2;\nvar _c;\n$RefreshReg$(_c, \"Chessboard2\");","map":{"version":3,"names":["React","useEffect","useState","Chessboard","Chess","jsxDEV","_jsxDEV","Chessboard2","_s","game","setGame","position","setPosition","fen","isWhiteTurn","setIsWhiteTurn","promotionSquare","setPromotionSquare","promoteFromSquare","setPromoteFromSquare","onPieceDrop","sourceSquare","targetSquare","move","from","to","promotion","flags","includes","handlePromotionSelection","piece","className","children","id","arePiecesDraggable","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/cod/ChessBlitz/frontend/src/Components/Chessboard2.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport { Chess } from \"chess.js\";\r\nimport \"../Styles/Chessboard.css\";\r\n\r\nexport default function Chessboard2() {\r\n  const [game, setGame] = useState(new Chess());\r\n  const [position, setPosition] = useState(game.fen());\r\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\r\n  const [promotionSquare, setPromotionSquare] = useState(null);\r\n  const [promoteFromSquare, setPromoteFromSquare] = useState(null);\r\n\r\n  // Handle piece drop (regular move and check for promotion)\r\n  const onPieceDrop = (sourceSquare, targetSquare) => {\r\n    const move = game.move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: \"q\" // Always promote to a queen by default (if promotion happens)\r\n    });\r\n\r\n    if (move && move.flags.includes(\"p\")) {\r\n      // Check if the move resulted in a promotion\r\n      setPromotionSquare(targetSquare); // Set the square for promotion\r\n      setPromoteFromSquare(sourceSquare); // Set the source square for promotion\r\n      return false; // Prevent the move from completing until promotion piece is chosen\r\n    }\r\n\r\n    if (move) {\r\n      setPosition(game.fen());\r\n      setIsWhiteTurn(!isWhiteTurn);\r\n    }\r\n\r\n    return move ? true : false;\r\n  };\r\n\r\n  // Function to handle promotion selection (Queen, Rook, Bishop, Knight)\r\n  const handlePromotionSelection = (piece) => {\r\n    if (promotionSquare && promoteFromSquare) {\r\n      // Make the promotion move with the selected piece\r\n      game.move({\r\n        from: promoteFromSquare,\r\n        to: promotionSquare,\r\n        promotion: piece\r\n      });\r\n\r\n      setPosition(game.fen());\r\n      setPromotionSquare(null); // Clear promotion state\r\n      setPromoteFromSquare(null);\r\n      setIsWhiteTurn(!isWhiteTurn); // Switch turn after promotion\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Chessboard\">\r\n      <Chessboard\r\n        id=\"Basicboard\"\r\n        position={position}\r\n        onPieceDrop={onPieceDrop}\r\n        arePiecesDraggable={true}\r\n      />\r\n      {/* Show promotion options only when a promotion is pending */}\r\n      {promotionSquare && (\r\n        <div className=\"promotion-options\">\r\n          <button onClick={() => handlePromotionSelection(\"q\")}>Queen</button>\r\n          <button onClick={() => handlePromotionSelection(\"r\")}>Rook</button>\r\n          <button onClick={() => handlePromotionSelection(\"b\")}>Bishop</button>\r\n          <button onClick={() => handlePromotionSelection(\"n\")}>Knight</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}